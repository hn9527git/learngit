存储过程：-----------------------------------------------------------------------------------------------------------------
	一组可编程的函数，是为了完成特定功能的SQL语句集
	完成特定功能，保存在数据字典中
特点：
	批量处理，统一接口
delimiter //（任意符号） 
	修改语句提交符号
例：
	delimiter //
	create procedure cc_name()
	BEGIN
	--sql语句
	END//
	delimiter ;
使用：
	call name();
查看：
	show procedure status WHERE DB="my_db_name";
	show create procedure cc_name;
删除：
	drop procedure cc_name;
声明变量：
	delimiter //
	create procedure cc_name()
	BEGIN
	--声明变量
	declare res1,res2 varchar(255) default "0";
	--变量赋值
	set res1=3;
	select avg(salary) into res2 from table_name;
	END//
	delimiter ;	
存储过程参数：
	in | out | inout
	delimiter //
	create procedure get_name(in name varchar(255),out salary int)
	BEGIN
	select salary into salary from table_name where ename=name;
	END//
	delimiter ;
参数使用：
	call get_name('luban',@s);
	select @s from DUAL(虚拟表，无表可用可以用这个，也可以不用);
自定义函数：
	delimiter //
	create function f_name(n int) returns varchar(255)
	BEGIN
	declare str varchar(100) default 'a-zA-Z';
	declare i int default 0;
	declare res_str varchar(255) default '';
	while i<n do
	set res_str=concat(res_str,substr('floor(rand()*52+1)',1,1));
	set i=i+1;
	end while
	return res_str;
	END//
插入千万条数据例：
	delimiter //
	create procedure insert_emp(in start_num int,in max_num int)
	begin
	declare i int default 0;
	set autocommit=0;--不让自动提交SQL语句
	repeat
	set i=i+1;
	insert into emp values(start_num+i,f_name(6),floor(10+rand()*30));
	until i=max_num
	end repeat;
	commit;-- 提交所有SQL语句，提高效率
	end//
	delimiter ;
调用：
	call insert_emp(100,10000000);--本机运行了两个小时-……-
############################################################################################
事务：
	A：原子性	
	C：一致性
	I：隔离性
	D：持久性
例：
	start transaction://开始事务
	update a set x=x-2000;//实际没变
	update b set y=y+2000;//实际没变
	commit;//事务结束，实际修改
--rollback--
	start transaction;
	update a set x=x-2000;//实际没变
	update b set y=y+2000;//实际没变
	rollback//撤回事务所有操作
--事务并发问题--
		  事务隔离级别（select @@tx_isolation;）8.0(select @@transaction_isolation;)
	读未提交（read uncommit）：一个会话查到另一个会话的未提交事务所作的修改
			也称为脏读。
	不可重复读（read commit）:一个事务要等到另一个事务提交后才能读到
			也称为提交读。两次同样的查询，可能有不一样的结果。
	重复读（repeatable read）：Mysql默认事务隔离级别
			同一事务内多次读到的数据一致
			解决了脏读，理论无法解决幻读，但可通过MVCC解决(间隙锁)。
	串行化（serializable）:不常用，解决幻读。最高级别，加行级锁，消耗资源大。
设置事务隔离级别：
	SET TRANSACTION ISOLATION LEVEL 级别名；
	仅当前会话：SET SESSION TRANSACTION ISOLATION LEVEL 级别名；
事务日志：
	存储引擎再修改表数据时只需要修改其内存拷贝，再将记录持久到硬盘上的事务日志中，
	然后内存中被修改的数据可以在后台慢慢刷回磁盘。称为预写式日志。
	中途崩溃，存储引擎重启时自动恢复。
自动提交：SHOW VARIABLES LIKE 'AUTOCOMMIT';
	MySQL默认每一条查询当作一个事务自动提交。Oracle不自动提交
￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥￥
视图：
	是一个虚拟表，内容由查询定义，简单来说，就是由select结果构成的表。
	安全，查询性能提高，提高了数据的独立性
例:
	create view view_name as (select语句);
使用
	select * from view_name;
修改
	create or replace view view_name as (select 语句)；
删除
	drop view view_name;
详细语句：
	create algorithm={undefined|merge|temptable} view view_name
	as (select语句) 
	with {cascaded|local|check option};
替换式:复合查询
具化式：先处理视图，结果集存在内存中，再处理SQL语句；
merge：属于替换式，修改视图可以直接修改基表中的数据
temptable:属于具化式，由于数据存在临时表中，不可以进行更新操作
undefined：没有定义该参数，mysql倾向于替换式，因为更有效
with check option:更新数据时不能插入不符合视图限制条件的记录
视图不可更改部分：不是来源于基表的数据就不能修改
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
MYSQL索引
	优点：提高查询效率，不必查询所有数据，节约查询时间，降低CPU消耗
	缺点：占用空间，降低更新表的速度
分类：
	单值，唯一，复合||全文(myisam)，空间(myisam)
创建：
	--声明主键时，自动创建唯一索引
	create index 索引名称 on table(columu[]...);
删除：
	drop index 索引名称 on table;
explain:
	explain select 语句;
索引方法：
	innodb只支持BTREE，不支持HASH
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
并发控制：
	共享锁(读锁):共享的，相互不阻塞。
	排它锁(写锁)：排他的，一个会阻塞其他的写锁和读锁
	表锁：锁定整张表，写操作阻塞其他用户，读锁不相互阻塞
	行级锁：存储引擎层实现。
死锁：
	两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源。
	例：数据冲突：多个事务以不同顺序锁定同一资源时，多个事务同时锁定同一资源时。
		存储引擎的实现方式也可能导致死锁。
	解决方案:1.检测返错2.超时放弃(不太好)。
	InnoDB处理死锁：将持有最少行级排他锁的事务进行回滚，然后重新执行。
MVCC：多版本并发控制----此处仅InnoDB的MVCC
	可以认为是行级锁的一个变种，很多情况下避免加锁操作，使开销更低。
	通过保存数据在某个时间点的快照来实现的，不管需要执行多长时间，每个事务看到的数据一致。
	乐观(optimistic)并发控制：
	悲观(pessimistic)并发控制：
	InnoDB的MVCC：
		通过记录后面保存两个隐藏的列来实现的，一个保存行创建时间，一个保存行过期时间。
		时间指的是系统版本号，每开一个新事务，此号自动递增。
	默认隔离级别下MVCC的操作过程：
		SELECT:
			1.InnoDB只查找版本早于当前事务的数据行，这样可以确保事务读取的行，
				要么是在事务开始前已经存在，要么是事务自身插入或修改过的。
				2.行的删除版本要么未定义，要么大于当前事务版本号，这样可以确定
				事务读取到的行是在事务开始之前未被删除。
		INSERT：
			InnoDB为新插入的每一行保存当前系统版本号作为行版本号。
		DELETE:
			InnoDB为新删除的每一行保存当前系统版本号作为行删除版本号。
		UPDATE：
			InnoDB为插入一行新纪录保存当前版本号作为行版本号，同时保存当前系统版本号到
			原来的行作为行删除标识。
	优点：这样设计使得大多数读操作不用加锁，读数据操作简单，性能很好。
	不足：需要额外的存储空间，更多的行检查，额外的维护工作。
MyISAM存储引擎：
	不支持事务和行级锁，崩溃后无法安全修复。
	加锁与并发：对整张表加锁，读加共享锁，写加排他锁，读查询时可并发插入。
	修复
	索引特性
	查询
	延迟更新索引键：创建时指定DELAY_KEY_WRITE选项，修改完成时不会立即将修改的索引
		数据写入磁盘，而是会写到内存中的键缓冲区，清理或关闭表时写入磁盘。
	压缩表
	














