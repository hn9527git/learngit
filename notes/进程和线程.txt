---------------------------进程环境-----------------------------------------------------
动态性
并发性
独立性
异步性
C程序的存储空间布局
【1】正文段：CPU执行的机器指令，一般只读
【2】初始化数据段：包含了程序中需要赋初值的变量
【3】非初始化数据段：bss("block started by symbol"由符号开始的段)段，程序开始之前内核将其初始化为0
【4】栈：自动变量以及每次函数调用时所需保存的信息都存在此段中。
【5】堆：用于动态存储分配，位于非初始化数据段顶和栈底之间
-----------------内存分配-------------------|
内存高地址                                  |
      ---------------命令行参数和环境变量   |
栈：  ---------------向下生长               |
堆：  ---------------向上生长               |
未初始化的数据-------由内核exec赋初值0      |
初始化的数据---------由内核exec从程序中读到 |
正文：---------------由内核exec从程序中读到 |
内存低地址                                  |
--------------------------------------------|
存储器分配：
	（1）void *malloc(size_t size);
		//分配指定字节数的存储区，初始值不确定
	（2）void *calloc(size_t nobj,size_t size);
		//为指定长度的对象，分配能容纳其指定个数的存储空间，每一位都初始化0
	（3）void *realloc(void *ptr,size_t newsize);
		//更改之前分配区的长度，新增（新增区域中的初始值不确定）或减少
	释放:
		void free(void *ptr);
环境变量：
	char *getenv(const char *name);
		//返回一个指向name=value字符串中的value
	int putenv(const char *str);
		//取name=value字符串放到环境表中，若已存在，删除原来的定义
	int setenv(const char *name,const char *value,int rewrite);
		//同上，但若已存在1.rewrite非0，同上2.为0，不删除，返回不出错
	void unsetenv(const char *name);
		//删除指定的变量，不存在也不出错
跳转功能函数
	int setjmp(jmp_buf env);
	void longjmp(jmp_buf env,int val);
	先使用setjmp()函数，将所需的信息记入变量jmpbuffer中并返回0；
	需要时调用longjmp()函数，使setjmp返回，但返回值为1；
	定义自动变量为volatile，和说明为全局和静态变量的值在执行longjmp时保持不变
资源限制：
	int getrlimit(int resource,struct rlimit *rlim);
	int setrlimit(int resource,const rlimit *rlim);
	struct rlimit {
		rlim_t rlim_cur;//软限制
		rlim_t rlim_max;//硬限制
		};
	三条规则：
	1.任何一个进程都可将软限制更改为小于或等于其硬限制
	2.任何一个进程都可以降低其硬限制，但必须大于等于其软限制值，对于普通用户是不可逆的
	3.只有超级用户可以提高硬限制
-------------------------进程控制-----------------------------------------------------
进程标识符：
	pid_t getpid(void); 返回：调用进程的进程 ID
	pid_t getppid(void); 返回：调用进程的父进程 ID
	uid_t getuid(void); 返回：调用进程的实际用户 ID
	uid_t geteuid(void); 返回：调用进程的有效用户 ID
	gid_t getgid(void); 返回：调用进程的实际组 ID
	gid_t getegid(void); 返回：调用进程的有效组 ID
进程控制块：task_struct 数据结构来表示
Linux支持两种进程：实时进程和普通进程
fork()函数	vfork()函数
	前者要拷贝父进程的数据段，后者不完全拷贝，在子进程没有调用exec或exit之前，与父进程只读共享数据段
	后者自动调用exec，子进程在父进程的地址空间中运行
	后者限定子进程先运行，父进程挂起直到子进程调用了exec或exit后，父子进程才没有执行次序的限制
exec()系列函数
int execl(const char *path,const char * arg,...);
	例：execl("/bin/","ls","-l","/etc/passwd",NULL);
	要求全路径，最后一个参数必须用空指针NULL结束
int execlp(const char *file,const char *arg,...);
	例:execlp("pwd","",NULL);
	如果filename包含/，则将其视为路径名，否则从PATH环境变量所指的目录中查找参数file的文件名，找到后执行，后边为参数，NULL结尾
更改用户ID和组ID
	int setuid(uid_t uid);
	int setgid(gid_t gid);
	1.若进程具有超级用户特权，则setuid函数将实际用户ID、有效用户ID、以及保存的设置用户ID设置为uid
	2.若进程没有超级用户特权，但是uid等于实际用户ID或保存得设置用户ID，以及保存的设置用户ID为uid，则setuid只将有效用户设置为uid
	3.若以上条件都不满足，则errno设置为EPERM,并返回错误
交换实际用户ID和有效用户ID的值
	int setreuid(uid_t ruid,uid_t euid);
	int setregid(git_t rgid,gid_t egid);
	一个非特权用户总能交换实际用户ID和有效用户ID
更改有效用户ID和有效组ID
	int seteuid(uid_t uid);
	int setegid(git_t gid);
	一个非特权用户可将其有效用户ID设置为其实际用户ID或其保存的设置用户ID。
	对于一个特权用户则可将有效用户ID设置为uid。
system函数也可以创建进程
	int system(const char * cmdstring)；
	该函数执行过程：1.fork()2.子进程中调用exec执行cmdstring3.父进程等待子进程返回结束。
僵死进程：
	一个已终止，但是其父进程尚未对其进行善后处理的进程。
	若父进程先于子进程死掉，那么子进程由init进程领养，若子进程终止，则init自动调用一个wait函数取得其终止状态
守护进程：
	独立启动守护进程：一直占据内存，响应快
	超级守护进程：由统一的守护进程来管理，需要唤醒，多了一层管理机制
进程组：
	一或多个进程的集合，进程组ID和组长进程ID一样，且组长进程退出，进程组ID不变存在
会话周期：
	一或多个进程组的集合，开始于用户登录，终止于用户退出，期间该用户所运行的所有进程都属于这个会话周期
setsid()函数：
	创建新会话，并担任该会话组组长
	作用：1。让进程摆脱原进程的控制 2.摆脱原进程组的控制 3.摆脱原控制终端的控制
编写守护进程：
	1.创建子进程，父进程退出。子进程成为孤儿进程，由1号进程收养
	2.在子进程中创建新对话。setsid()函数
	3.改变当前目录（一般改为根目录）
	4.重设文件权限掩码
	5.关闭文件描述符（从父进程继承的，且0，1，2也没有了存在价值，关闭）
	6.守护进程退出处理（kill）编写kill信号的signal信号处理函数，使其能正常退出
进程退出：
	8种方法，5正常，3异常
	5正常：
	main函数中的return
	_exit():停止并清除内存空间以及内核中的数据结构
	exit():检查文件打开情况，缓冲写入文件，并停止
	最后一个线程返回
	最后一个线程调用了pthread_exit函数
	3异常：
	调用abort函数
	接到一个信号并且终止
	最后一个线程对取消请求作了响应
登记终止处理函数
	int atexit(void *function_name(void));//成功返回0，失败返回非0
		//由exit自动调用
		//相当于将函数入栈，exit时按相反的顺序调用，不需要参数，也不期望它返回一个值
销毁进程：
	子进程终止时将产生SIGCHLD信号，可以利用各种信号函数完成消灭僵尸进程
		用sigaction函数注册该信号，在注册函数中调用waitpid函数即可
	pid_t wait(int * status);//阻塞等待子进程
		WIFEXITED(status):子进程正常结束返回真
		WIFSIGNALED(status):子进程异常结束返回真
		WEXITSTATUS(status):正常返回时调用，返回状态字的底八位
		WTERMSIG(status):异常返回时调用，返回引起终止的信号代号
	waitpid()：
		pid_t waitpid(pid_t pid,int * statloc,int options);//返回终止子进程ID或0，失败返回-1
			-- pid:等待终止的目标子进程的ID，若传递-1，则等同于wait函数（等待任意子进程）
			-- statloc:接受信息
			-- options:传递头文件中的声明的常量WNOHANG，即使没有终止的子进程也不会进入阻塞，返0退出
			-- 不阻塞
-------------------------信号---------------------------------------------------------
进程何时检查是否收到信号：
	即将从内核态返回到用户态或者要进入或离开一个适当的低调度优先级睡眠状态时
内核何时处理进程收到的信号；
	从内核态返回用户态时
64个信号：
	前32个Linux内核支持，不可靠
	后32个后来扩充的，可靠
	区别：不可靠信号不支持排队
注册信号函数：
	signal();
		void (*signal(int signo,void(*handler)(int)))(int);
		sigkill和sigstop不能设置信号处理函数
	sigaction函数
		int sigaction(int signo,const struct sigaction * act,struct sigaction * oldact);
		-- //UNIX操作系统中完全相同
		-- //返回0，失败返回-1
		-- signo：信号
		-- oldact：通过此参数获取之前注册的信号处理函数指针，若不需要传0
		-- struct sigaction
			{
				void (*sa_handler)(int);//信号处理函数的地址值
				void (*sa_sigaction)(int,siginfo_t*,void *);
				sigset_t sa_mask;//sigemptyset(act.sa_mask)将所有位置0////阻塞此信号好像是
				int sa_flags;//0
			}
发送信号：
	kill函数:
		int kill(pid_t pid,int sig);
		pid>0	发送sig给pid进程
		pid=0	发送sig给与目前进程相同进程组的所有进程
		pid<0&&pid！=-1		发送sig给进程组id为pid绝对值的进程组中的所有进程
		pid=-1		除了进程自身，向所有进程id大于1的进程发送信号
		sig=0时，不发送任何信号，但照常检查错误，可用于检查目标进程是否存在
	raise函数：给自身发送信号
		int raise(int sig);
	sigqueue函数：只能给一个进程发送信号，可以传递附加信息
		int sigqueue(pid_t pid,int sig,const union sigval value);
		-- 返回0，失败返回-1
		-- typedef union sigval
		{
			int sival_int;
			void * sival_ptr;//只想要传递的信号参数
		}sigval_t;
	alarm函数：定时发送信号函数
		unsigned int alarm(unsigned int seconds);
		调用后所有以前的alarm调用都将无效，如果调用alarm之前进程中设置了闹钟时间，
			则返回上一个闹钟时间剩余的时间，否则返回零。
信号集
	typedef struct
	{
		unsigned long sig[_NSIG_WORDS];
	}sigset_t
	int sigemptyset(sigset_t * set);	置空,返回0，失败返回-1
	int sigfillset(sigset_t * set);		置满（包含所有信号），返回0，失败返回-1
	int sigaddset(sigset_t * set,int signum);		添加，返回0，失败返回-1
	int sigdelset(sigset_t * set,int signum);		删除，返回0，失败返回-1
	int sigismember(const sigset_t * set,int signum);检查在否，在返回1，不在返回0，失败返回-1
信号的阻塞和挂起：
	阻塞：
		int sigprocmask(int how,const sigset_t * set,sigset_t * oldset);
		--how:SIG_BLOCK表示加入信号屏蔽，SIG_UNBLOCK表示删除信号屏蔽，SIG_SETMASK表示重设信号屏蔽集
		--成功返0，失败返回-1，并errno设置为EINVAL
	挂起：
		int sigsuspend(const sigset_t * set);
		int sigpending(sigset_t * set);
		--判断信号是否悬而未决即阻塞未处理
		--将这种信号存储在set中
精准定时：
	setitimer函数
可重入函数：
	可以在运行期间再次被调用的函数：
		在任务执行期间捕捉到信号并对其进行处理时，进程正在执行的指令序列就被信号处理程序临时中断
		如果从信号处理函数返回，则继续执行进程断点处的正常指令序列，重新恢复到断点重新执行的过程中
		函数所依赖的环境没有发生变化，则称这个函数是可重入的。
	通常的不可重入的条件：
		使用了静态数据结构
		调用了malloc函数和free函数
		调用了标准I/O函数
		进行了浮点运算
SIGCHLD信号：
	子进程结束时父进程会收到这个信号（父进程或者忽略该信号，或者捕捉它，或者等待它的子进程结束，或者
	父进程先终止，由init进程接管该子进程）
------------------------------进程同步机制-----------------------------------------------------
匿名管道:	只存在内存中(结束则消失)，亲缘进程的通信，即fork出来的各个进程
	pipe(int fd[2])函数
特殊情况;
		写端关闭，读端读取管道中的剩余数据后再次读会返回0，就像读到文件末尾一样
		写端没关但不写数据，读端读取剩余数据后再次读会阻塞等待
		写端关闭后再写会收到SIGPIPE信号，默认自动终止，也可以自定义处理函数
		写端没关，读端未读，则管道满了(4kb)，则写阻塞等待
命名管道：	文件形式存在于文件系统中(类似一个设备，不删除即存在)，所有能访问该文件的进程都可使用
		先进先出，不支持文件定位操作
	在shell中使用mkfifo [option] name 即可创建一个命名管道
	1.没写就读会产生SIGPIPE信号
	2.所有写进程关闭，则读操作认为已经到达文件尾
	3.写入不超过PIPE_BUF，不会产生交错
	4.阻塞，读打开阻塞直到写进程打开，写进程打开阻塞直到读进程打开，可设置O_NONBLOCK标志来实现
	int mkfifo(const char * pathname,mode_t mode);
		-- pathname:路径名
		-- mode:例如0755；
IPC机制：system V ipc 继承自unix 包括 消息队列 信号量 共享内存
	标识符：不同结构可相同
	关键字：外部名称，唯一
	ftok(pathname,int proj_id)函数：将一个路径和项目转换为关键字
	需要主动删除，不能公开访问，没有文件描述符
	SHELL查看：ipcs [-m:指定共享内存|-q:指定消息队列|-s:指定信号量|-a:所有]+
		[-t:按时间|-p:按标识符|-c:按创建者|-l:按权限|-u:按概要]
消息队列：客户端发送的请求服务器不能及时处理，将请求放在消息队列中
			先返回客户端发送请求成功，再在消息队列中取请求执行
	存在内核中的一种链表式结构组织的数据
	#include <sys/msg.h>
	int msgget(ket_y key,int msgflg);//创建或打开消息队列
		-- key:标识一个消息队列，为IPC_PRIVATE时，不管msgflag是啥，都创建一个新的消息队列
		-- msgflg:IPC_CREATE|IPC_EXCL//存在则打开，不存在则创建
	int msgctl(int msqid,int cmd,struct msqid_ds * buf);//获取和设置消息队列的属性
		-- msqid:消息队列标识符
		-- cmd:要对消息队列进行的操作
				-- IPC_STAT：读取消息队列的属性存储在buf中
				-- IPC_SET：将buf属性设置给该消息队列
				-- IPC_EMID：将该消息队列从内核中删除
	int msgrcv(int msqid,void *msg_ptr,size_t msg_sz,long int msgtype,int msgflag);//从消息队列读取一条消息
		-- msqid:消息队列标识符
		-- msg_ptr:同下
		-- msg_sz:同下
		-- msgtype:从消息队列读取的消息形态，0表示所有消息都会被读取
		-- msgflag:控制函数行为，0阻塞直到有消息可读，IPC_NOWAIT无消息直接返回不阻塞
	int msgsnd(int msqid,const void *msg_ptr,size_t msg_sz,int msgflag);//将消息送入消息队列
		-- msqid:消息队列标识符
		-- msg_ptr：指向消息缓冲区的指针，该缓冲区暂时存储要发送的消息
				--struct msgbuf{
					long mtype;//消息类型，大于0
					char mtext[1];//消息数据
				}；
		-- msg_sz:要发送的信息的长度，sizeof(struct msgbuf)-sizeof(long);
		-- msgflg:控制函数行为0表示阻塞直到消息可以被写入，IPC_NOWAIT非阻塞，若无法送入消息，立即返回
生成键值函数：系统建立IPC通信时必须指定一个键值
	key_t ftok(char * fname,int id)
		-- fname:指定的文件名
		-- id:子序列
		-- 需要保证文件不会被删除，因为删除后重建同名文件键值也会改变	
信号量：控制多个进程访问计算机资源的共享机制，本质是一个计数器
	semget
	semop
	semctl
共享内存：速度最快，多个进程共享一段内存空间进行数据交换的机制
	shmget:创建或打开
	shmat:连接共享内存
	shmctl:设置属性
	shmdt:脱离共享内存
-----------------------------线程-------------------------------------------------------------------
创建线程不对进程拷贝，和进程共用所有资源,线程和进程不分离
	编译时加上 -pthread
	如果创建线程的进程结束了，所有线程都结束
	将创建线程的进程称之为主线程
	如果一个进程没有创建线程，即可以称为进程，也可以成为线程
	cpu最小的调度单位为线程
int pthread_create(pthread_t *pid,const pthread_attr_t *attr,void *(*start_routine)(void *),void *arg);//创建线程
	-- pid :指针，指向线程创建成功后的线程ID
	-- attr:线程属性结构体指针，NULL表示使用默认属性
	-- start_routine:线程创建后要执行的函数
	-- arg:指向传递给线程函数的参数
	-- 成功返回0
线程属性联合体	union pthread_attr_t
	获取线程属性的函数使用方法:
		#define _GUN_SOURCE
		#include <pthread.h>
		int pthread_getattr_np(pthread_t thread,pthread_attr_t * geted_attr);
		一系列获取状态的函数 例：pthread_attr_getdetachstate(&geted_attr，&state);
		//使用完需要销毁该获得的联合体
		int pthread_attr_destory(pthread_attr_t *geted_attr)
	分离状态：
			线程有两种状态，joinable(非分离)和unjoinable(分离)
			前者：线程退出时不会释放所占用的堆栈和线程描述符，只有调用pthread_join()函数才会释放
				  非分离线程可在主线程中使用pthread_join函数等待子线程的结束
			后者：在线程创建时或创建后调用，改为unjoinable状态，线程退出时自动释放所占资源。
				  分离线程没有pthread_join函数，可以让主线程先退出而进程不退出，一直等到子线程退出了进程才退出。在main线程中执行pthread_exit终止main线程，但进程的资源会为main线程
				  创建的其他线程保持打开的状态，直到其他线程都终止。（非main线程中调用pthread_exit函数，只退出当前线程）
		分离线程：
			线程默认是非分离的，父线程会维护子线程的某些信息并等待子线程的结束，如果父线程没有调用pthread_wait函数，
			子进程结束时，父线程维护的信息没有及时释放，如果创建多个子线程，可能堆栈空间不足出错返回
		分离：
			（1）int pthread_detach(id)；//线程创建完成后，将id指定的线程设置为分离线程
			（2）创建时设置分离属性	pthread_attr_init(&thread_attr)-->pthread_attr_setdetachstate(&thread_attr,PTHREAD_CREATE_DETACHED)-->pthread_create(,&thread_attr,,);
	调度策略和参数：
		实时与非实时：前者通过优先级来抢占cpu，Linux是一个非实时系统，但其线程也分实时和非实时！
		（1）SCHED_OTHER（分时调度策略）默认
		（2）SCHED_FIFO（先来先服务）
		（3）SCHED_RR（时间片轮循）
	作用域：
	栈尺寸：
		//获取线程默认栈尺寸的函数,//首尾工作同上
		int pthread_attr_getstacksize(pthread_attr_t *geted_attr,size_t *stacksize);
	栈地址：
	优先级：
		//获得最大或最小优先级函数
		int sched_get_priority_min(int policy);//参数为三种策略，返回值为优先级数
		-----------------------max-----------------------------//同上
	等
int pthread_join(pthread_t pid,void **value_ptr);
	-- pid:等待的线程号
	-- value_ptr：复制一份线程退出值到一个内存区域中，该指针指向该内存
	-- 成功返回0，失败返回错误码
pthread_exit（）结束本线程，对其他线程没有影响
pthread_cancel（）结束指定线程，接收到结束请求的线程会终止运行
	在处理重要数据时可以设置为不接受结束请求（阻塞），pthread_setcancelstate，
	等待线程结束pthread_join()，也可以设置分离线程，由系统回收线程资源；
特点：
	创建线程比创建进程的系统开销低
	线程之间的通信简单快速
	响应快
	改善程序结构
	使多处理系统更加有效
线程标识符
	获取自身标识符：pthread_self()
	比较标识符：pthread_equal(1,2)
创建线程：
	int pthread_create(pthread_t * id,pthread_attr_t * attr,void *(*start_routine)(void *),void * arg);
	-- id:传入即可，创建成功则把标识符放进去
	-- attr:设置属性
	-- start_routine:线程开始运行的函数，用户指定
	-- arg:第三个函数所需的参数
线程阻塞和退出：
	int pthread_join(pthread_t thread,void ** retval);//阻塞等待线程退出
	-- thread：要等待的线程id
	-- retval:保存其他线程返回的参数
	void pthread_exit(void * retval);//线程主动退出
取消和清理线程：
	int pthread_cancle(id);//请求取消同一进程中的其他线程，返回0，失败返回错误码
		-- 本函数不一定能取消陷入死循环的线程
		-- 可以在线程处理函数中可能发生死循环的地方调用
	int pthread_testcancel()函数，让内核去检测是否需要取消该线程
	调用此函数取消了一个线程后，应该调用函数对线程退出之后的环境进行清理(线程清理处理程序)
	viod pthread_cleanup_push(void (*routine)(void *),void * arg);
		-- routinue:函数指针
		-- arg:参数指针
		-- 由该函数压栈的routinue函数何时执行
			（1）线程主动结束时，比如return或pthread_exit
			（2）调用函数pthread_clearnup_pop,且其参数为非0时（弹出压栈的函数，不执行，因为参数为0）
			（3）线程被其他线程取消时，即被调用pthead_cancel()函数
	void pthread_cleanup_pop(int execute);
		-- execute:为0时不执行清理函数，非0时则执行清理函数
		-- 此函数必须与push函数成对出现（即使不执行（放在return语句后）），否则出错
给同进程的线程发送信号
	int pthread_kill(pthread_t pthread,int signal);//不是杀死，只是发信号，被发送信号的线程要注册该信号的处理函数
		//发送0可以检测线程是否存在，存在返回0，不存在返回错误码，如ESRCH表示线程不存在，EINVAL表示信号不合法
		//如果被发送信号的线程没有注册信号处理函数，则按照信号默认的行为影响整个进程。
线程的结束：
	（1）在线程函数中调用pthread_exit()函数			//主动//不会导致C++对象被析构
	（2）线程所属的进程结束了，比如调用了exit函数	//被动//不要用，C++对象不会被销毁，内存泄漏
	（3）线程函数执行结束后返回						//主动//推荐使用，正常结束线程
	（4）线程被同一进程下的其他线程通知结束或取消	//被动//用于用户等不及这个线程的结果使其结束或取消
	注：exit是结束进程的函数，如果在线程中调用exit会把
	进程和所有的线程都结束；最好不要在线程中调用
------------------------C++ 11 中的线程类--------------------------------------------------------------
专用命名空间：
	std::this_thread::******
常用线程类成员函数：
	thread:构造函数有4种
	get_id:获得线程ID
	joinable:判断线程对象是否可连接
	join:阻塞函数，等待线程结束
	native_handle:用于获得与操作系统相关的原生线程句柄
	swap:线程交换
	detach:分离线程
	yield:让出自己的CPU时间片
	sleep_until:阻塞到某个时间点
	sleep_for：阻塞一段时间
创建：
	thread();//默认构造函数，线程函数不执行
	thread(线程函数指针);
	thread(线程函数，参数);
	thread(move(thread_other));被移动线程不会执行，因为它的线程函数移动给本线程了
线程同步：
	（1）基本互斥锁，std::mutex
		成员函数：
			mutex:构造函数
			lock:上锁，阻塞等待其他线程解锁后再本线程上锁
			unlock:解锁，配对使用
			Try_lock：如果没上锁，则上锁
			native_handle:得到本地互斥锁句柄
	（2）递归互斥锁，std::recursive_mutex
	（3）定时互斥锁，std::time_mutex
		成员函数：
			mutex:构造函数
			lock:上锁，阻塞等待其他线程解锁后再本线程上锁
			try_lock:没上锁则努力上锁，但不阻塞
			try_lock_for:没上锁则再一定时间内努力上锁，过了时间就退出
			native_handle:得到本地互斥锁句柄
	（4）定时递归互斥锁，std::time_mutex
------------------------线程同步机制-----------------------------------------------------------------
临界资源：
	一次仅允许一个线程使用的共享资源，各个线程应该互斥地访问
临界区：
	每个线程中访问临界资源的那段代码称为临界区临界区：
	获取临界区的锁称之为进入临界区，把锁的释放称之为离开临界区
	与互斥锁和条件变量的不同：前两个在系统的任何进程都是可见的，而临界区的
	的作用范围仅限于本进程，其他进程无法获取该锁
信号量:
	将所有共享数据资源数据化，使用资源前检查信号量的值，大于零表示有资源可用
	等于零表示没有资源可用，则阻塞等待
互斥锁：
	原子性：操作系统保证如果一个线程锁定了一个互斥锁，没有其他线程可以在同一时间成功锁定这个互斥锁
	唯一性：在一个线程锁定互斥锁后，在它解除锁定之前没有其他线程可以锁定这个互斥量
	非繁忙等待：如果一个线程锁定了一个互斥锁，第二个线程又试图去锁定，则第二个线程将被挂起直到第一个线程
		解除锁定，第二个线程才被唤醒同时锁定这个互斥锁
	定义一个互斥变量：
		pthread_mutex_t mutex;
	互斥锁初始化函数：
		//动态方式
		int pthread_mutex_init(pthread_mutex_t *[restrict]mutex,const pthread_mutex_attr *[restrict]attr);
			--[restrict]:只用于限定指针，用于告知编译器所有修改该指针指向内容的操作全部基于该指针，即不存在其他修改途径
			--优点：帮助编译器进行更好的代码优化，生成更有效率的汇编代码
		//静态方式，不需要销毁
		#define PTHREAD_MUTEX_INITIALIZER {{0,0,0,0,0,{0}}}
		pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER;//注意此处mutex不能是指针
	互斥锁加锁函数：
		int pthread_mutex_trylock(pthread_mutex_t * mutex);//不阻塞，失败返回错误
		int pthread_mutex_lock(pthread_mutex_t *mutex);//阻塞等待资源解锁
	互斥解锁函数：
		int pthread_mutex_unlock(pthread_mutex_t *mutex);//调用本函数的线程必须是给互斥锁加锁的同一个线程
	互斥锁解除函数：
		int pthread_mutex_destory(pthread_mutex_t *mutex);
读写锁：
	以读模式加锁后，当有多个线程试图再以读模式加锁时，并不会造成这些线程阻塞等待解锁
	大大增加了并发效率，并不是速度一定比互斥锁快
	特点：
		（1）如果一个线程用读锁锁定了临界区，那么其他线程也可以用读锁来进入临界区，就可以并行操作了，但如果再用写锁加锁就会造成阻塞，写锁请求阻塞后，
		后面继续有读锁来请求时，这些读锁就会被阻塞，这样避免了读锁长期占用资源，防止了写锁饥饿
		（2）如果一个写锁锁定了临界区，那么其他线程的读写锁都会阻塞
	定义读写锁:
		pthread_rwlock_t rwlock;
	读写锁初始化：
		//常量初始化，不需要销毁
		pthread_rwlock_t rwlock=PTHREAD_RWLOCK_INITILIZER;//不能是指针
		//函数初始化
		int pthread_rwlock_init(pthread_rwlock_t *[restrict] rwlock,const pthread_rwlockattr_t * restrict attr);
			-- rwlock:表示读写锁
			-- attr:读写锁属性结构体指针，NULL表示默认属性
			-- 成功返回0，失败返回错误码
	读写锁上锁函数：
		//读写锁读模式上锁
		int pthread_rwlock_rdlock(pthread_rwlock__t * rwlock);//阻塞等待资源解锁
		int pthread_rwlock_tryrdlock(pthread_rwlock__t * rwlock);//不阻塞，无可用资源返回EBUSY
		//读写锁写模式上锁
		int pthread_rwlock_wrlock(pthread_rwlock__t * rwlock);//阻塞等待资源解锁
		int pthread_rwlock_trywrlock(pthread_rwlock__t * rwlock);//不阻塞，无可用资源返回EBUSY
	读写锁销毁函数：
		int pthread_rwlock_destory(pthread_rwlock__t * rwlock);
条件变量：
	互斥锁只有两种状态，条件变量是对互斥锁的补充，它允许线程阻塞并等待另一个线程发送的信号，当收到信号时，
		阻塞的线程就被唤醒并试图锁定这个与之相关的互斥锁
	定义一个条件变量：
		pthread_cond_t cond;
	条件变量初始化：
		//函数初始化
		int pthread_cond_init(pthread_cond_t *cond,const pthread_cond_attr *attr);
		//静态初始化
		pthread_cond_t cond=PTHREAD_COND_INITIALIER;//不能是指针
		清除cond指向的条件变量的任何状态，存储条件变量的内存空间不释放
	等待条件变量函数:
		int pthread_cond_wait(pthread_cond_t *[restrict] cond,pthread_mutex_t *[restrict] mutex);
			-- cond:条件变量指针
			-- mutex:互斥锁变量指针
		//调用后发生原子操作：线程将mutex解锁，线程被条件变量cond阻塞。
		//可以被pthread_cond_signal()或pthread_cond_broadcast()函数唤醒，如果唤醒后条件还不满足，则继续阻塞
	唤醒等待条件变量的函数
		int pthread_cond_signal(pthread_cond_t * cond);
			--只唤醒一个等待该条件变量的线程
		int pthread_cond_broadcast();
			--唤醒所有等待该条件变量的线程
	条件变量解除函数：
		int pthread _cond_destory(pthread_cond_t *cond);

可重入函数：
	一个函数没有执行完成，有一次进入该函数执行
	可重入表示该函数被重入之后不会产生任何不良后果，可在多线程环境下放心使用
--------------------------------------线程池-------------------------------------------------------------------
提前创建一堆线程，初始都处于空闲等待状态，当有任务时，就取一个线程来处理，处理后再放进线程池中，避免了创建销毁线程的开销
适用于连续产生大量并发任务的场合

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	