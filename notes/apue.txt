fcntl函数：
	int fcntl(int filedes,int cmd,...);//第三个参数总是一个整数
	五种功能：
	（1）复制一个现存的描述符（cmd=F_DUPFD）
	（2）获得/设置文件描述符标志（cmd=F_GETFD或F_SETFD）
		当前只定义了一个文件描述符标志FD_CLOSEEXEC //默认0，exec时不关闭，1关闭
	（3）获得/设置文件状态标志（cmd=F_GETFL或F_SETFL）
		O_RDONLY	O_WRONLY	O_RDWR只能选一个
		O_APPEND|O_NONBLOCK|O_SYNC|O_ASYNC//可更改的就这四个
	（4）获得/设置异步IO有权（cmd=F_GETOWN或F_SETOWN）
		获取当前接收SIGIO和SIGURG信号的进程ID或进程组ID
		设置接收SIGIO和SIGURG信号的进程ID或进程组ID，正的arg指定一个进程ID，负的arg表示等于arg绝对值的一个进程组ID。
	（5）获得/设置记录锁（cmd=F_GETLK,F_SETLK或F_SETLKW）
	返回值要与屏蔽字O_ACCMODE相与，然后与想要的值比较
ioctl函数：
int stat(const char *pathname,struct stat *buf);
	//给定一个pathname，返回一个相关的信息结构体
int fstat(int fd,struct stat *buf);
	//获得已在文件描述符上打开的文件的相关信息
int lstat(const char *pathname,struct stat *buf);
	//类似stat函数，但当pathname是符号连接时，返回符号连接的信息
struct stat
{
	dev_t     st_dev;         /* ID of device containing file */
    ino_t     st_ino;         /* inode number */
    mode_t    st_mode;        /* file type and mode */
    nlink_t   st_nlink;       /* number of hard links */
    uid_t     st_uid;         /* user ID of owner */
    gid_t     st_gid;         /* group ID of owner */
    dev_t     st_rdev;        /* device ID (if special file) */
    off_t     st_size;        /* total size, in bytes */
    blksize_t st_blksize;     /* blocksize for filesystem I/O */
    blkcnt_t  st_blocks;
}
测试宏：
	S_ISREG(stat.st_mode)	//是否为普通文件
	S_ISDIR()				//目录文件
	S_ISCHR()				//字符特殊文件
	S_ISBLK()				//块特殊文件
	S_ISFIFO()				//管道
	S_ISLNK()				//符号连接
	S_ISSOCK()				//套接字
int access(const char *pathname,int mode);
	测试：	mode			说明
			R_OK		测试读
			W_OK			写
			X_OK			执行
			F_OK			存在
mode_t umask(mode_t mask);
	//设置权限屏蔽位
	（0666） S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH
int chmod(const char *pathname,mode_t mode);
	//设置指定路径文件的权限
int fchmod(int fd,mode_t mode);
	//设置已打开的文件的权限
	mode 			说 明
S_ISUID 	执行时设置-用户- I D
S_ISGID 	执行时设置-组- I D
S_ISVTX 	保存正文//粘住位，只有拥有文件者|目录者|root才可以删除，例/tmp
S_IRWXU 	用户（所有者）读、写和执行
S_IRUSR 	用户（所有者）读
S_IWUSR 	用户（所有者）写
S_IXUSR 	用户（所有者）执行
S_IRWXG 	组读、写和执行
S_IRGRP 	组读
S_IWGRP 	组写
S_IXGRP 	组执行
S_IRWXO 	其他读、写和执行
S_IROTH 	其他读
S_IWOTH 	其他写
S_IXOTH 	其他执行
int chown(const char *path, uid_t owner, gid_t group);
	//更改文件ID或组ID
int fchown(int fd, uid_t owner, gid_t group);
	//更改文件描述符打开的文件
int lchown(const char *path, uid_t owner, gid_t group);
	//更改链接文件本身
int truncate(const char *path, off_t length);
	//截断文件到length个字节
int ftruncate(int fd, off_t length);
	//截断文件描述符打开的文件到length个字节
int link(const char *pathname,const char *newpath);
	//新建一个目录项，引用指定文件（硬连接），不能是目录
int unlink(const char *pathname);
	//删除一个目录项
int remove(const char *pathname);
	//对于文件，与unlink相同
	//对于目录，与rmdir相同
int rename(const char *oldname,const char *newname);
	(1) 如果o l d n a m e说明一个文件而不是目录，那么为该文件更名。在这种情况下，如果
	n e w n a m e已存在，则它不能引用一个目录。如果 n e w n a m e已存在，而且不是一个目录，则先将
	该目录项删除然后将o l d n a m e更名为n e w n a m e。对包含o l d n a m e的目录以及包含n e w n a m e的目录，
	调用进程必须具有写许可权，因为将更改这两个目录。
	(2) 如若o l d n a m e说明一个目录，那么为该目录更名。如果 n e w n a m e已存在，则它必须引用
	一个目录，而且该目录应当是空目录（空目录指的是该目录中只有 . 和.. 项）。如果n e w n a m e存
	在（而且是一个空目录），则先将其删除，然后将 o l d n a m e更名为n e w n a m e。另外，当为一个目
	录更名时， n e w n a m e不能包含 o l d n a m e作为其路径前缀。例如，不能将 / u s r / f o o更名为
	/ u s r / f o o / t e s t d i r，因为老名字（/ u s r / f o o）是新名字的路径前缀，因而不能将其删除。
	(3) 作为一个特例，如果o l d n a m e和n e w n a m e引用同一文件，则函数不做任何更改而成功返
	回。
	如若n e w n a m e已经存在，则调用进程需要对其有写许可权（如同删除情况一样）。另外，
	调用进程将删除o l d n a m e目录项，并可能要创建 n e w n a m e目录项，所以它需要对包含 o l d n a m e及
	包含n e w n a m e的目录具有写和执行许可权。
int symlink(const char *pathname,const chat *sympath);
	//创建符号连接到指定文件（不要求pathname存在，也不要求同一文件系统）
int readlink(const char *pathname,char *buf,int bufsize);
	//读取符号连接本身，返回符号连接的内容到buf中，并且不以null结尾
文件的时间：
	atime：最后存取时间 			例：read		ls -u
	mtime：最后修改时间 			例：write		默认显示
	ctime：i节点状态最后修改时间	例：chmod chown ls -c
int utime(const char *pathname,const struct utime *times);
struct utime{
	time_t atime;
	time_t modtime;
}
	//修改文件的存取时间和最后修改时间
int mkdir(const char *pathname,mode_t mode);
	//创建一个空目录
int rmdir(const char *pathname);
	//如果此调用使目录的连接计数成为 0，并且也没有其他进程打开此目录，则释放由此目录占用
	的空间。如果在连接计数达到 0时，有一个或几个进程打开了此目录，则在此函数返回前删除
	最后一个连接及 . 和.. 项。另外，在此目录中不能再创建新文件。但是在最后一个进程关闭它
	之前并不释放此目录（即使某些进程打开该目录，它们在此目录下，也不能执行其他操作，因
	为为使r m d i r函数成功执行，该目录必须是空的）。
void sync(void);
int fsync(int fd) ;
	//使修改过的块的缓存排入写队列就返回
-----------------------标准I/O库---------------------------------------------------
标准I/O库的操作是基于流的
标准I/O提供缓存的目的是尽可能减少使用read和write系统调用的数量。
三种缓存类型：
	全缓存：当填满缓存区后才进行实际的I/O操作。
	行缓存：当输入和输出中遇到新行符，执行I/O操作
	不带缓存：相当于直接调用系统read和write
系统默认全缓存，但如果流引用终端设备，则该流是行缓存的。也可以自定义。
void setbuf(FILE *fp,char * buf);
int setvbuf(FILE *fp,char *buf,int mode,size_t size);
	//自定义缓存
int fflush(FILE *fp);
	//强制刷新流
打开流：
	FILE *fopen(const char *pathname,const char *type);
		打开路径名指定的一个文件
	FILE *freopen(const char *pathname,const char *type,FILE *fp);
		在一个特定的流上打开一个指定的文件
	FILE *fdopen(int *fd,const char *type);
		使一个现存的文件描述符与标准I/O流相结合
关闭流：
	int fclose(FILE *fp);
当一个进程正常终止时，则所有带未写缓存数据的标准I/O流都被刷新，所有打开的标准I/O流都被关闭。
读写流：
	（1）每次一个
	输入函数：
			int getc(FILE *fp);//可以是一个宏
			int fgetc(FILE *fp);//函数，调用时间一般长于宏
			int getchar(void);//默认从标准输入流stdin读数据
		出错或文件末尾返回同样的值，可以用下列函数区分
			int ferror(FILE *fp);//条件为真返回非0，否则为0
			int feof(FILE *fp);//条件为真返回非0，否则为0
			void clearerr(FILE *fp);//清除错误标志
		从一个流读之后，可以将字符再送回流中
			int ungetc(int c,FILE *fp);//成功返回C，失败为EOF
	输出函数：
			int putc(int c,FILE *fp);
			int fputc(int c,FILE *fp);
			int putchar(int c);//同上
	（2）每次一行
	输入：
		char *fgets(char *buf,int n,FILE *fp);
		char *gets(char *buf);//从标准输入读，可能缓存越界，勿用
	输出：
		int fputs(const char *str,FILE *fp);
		int puts(const char *str);默认在最后写一个新行符，即换行
	推荐使用fgets和fputs函数，记得加换行符，但有NULL字符或换行符则不能正常工作
	读写二进制数组：
		size_t fread(void *ptr,size_t size,size_t nobj,FILE *fp);
		size_t fwrite(const void *ptr,size_t size,size_t nobj,FILE *fp);
	（3）直接I/O
定位流：
	（1）ftell和fseek
		long ftell(FILE *fp);//成功返回当前位置指示，出错返回-1
		int fseek(FILE *fp,long offset,int whence);//成功返回0
			--offset:偏移量
			--whence:(1)SEEK_SET开始(2)SEEK_CUR当前(3)SEEK_END末尾
		void rewind(FILE *fp);//将流设置到文件的起始位置
	（2）fgetpos和fsetpos//需要移植到非UNIX系统上应当使用
		int fgetpos(FILE *fp,fpos_t *pos);//成功返0
			//将文件指示器的当前值存在pos指向的对象中
		int gsetpos(FILE *fp,const fpos_t *pos);//成功返0
			//将流重新定位至pos指定的位置
格式化I/O
	格式化输出：
	（1）int printf(const char *format,...);//成功返回输出字符数
		//将格式化数据写到标准输出
	（2）int fprintf(FILE *fp,const cahr format,...);//成功返回输出字符数
		//将格式化数据写到指定的流
	（3）int sprintf(char *buf,const char *format,...);//返回存入数组的字符数
		//将格式化数据写到数组buf中，并在尾端自动加一个null字节，但该字节不包含在返回值中
	格式化输入：
	（1）int scanf(const char *format,...);
	（2）int fscanf(FILE *fp,const char *format,...);
	（3）int sscanf(const char *buf,const char *format,...);
每个I/O流都有一个与其相关联的文件描述符，可以调用fileno获得
	int fileno(FILE *fp);//成功返回文件描述符
--------------------系统数据文件和信息--------------------------------------------
存取口令文件中信息的函数：
	（1）struct passwd *getpwuid(uid_t uid);//ls使用
	（2）struct passwd *getpwnam(const char *name);//login使用
查看整个口令文件：
	（2）struct passwd *getpwent(void);//返回一个由它填写好的passwd结构指针
	（1）void setpwent(void);首先反绕它所使用的文件
	（3）void endpwent(void);关闭这些文件
阴影口令文件：至少包含用户名和加密口令
查看组名或数值组ID
	struct group *getgrgid(gid_t gid);
	struct group *getgrnam(const char *name);
搜索整个组文件：
	（1）void setgrent(void);//打开组文件并反绕它
	（2）struct group *getgrent(void);//读取下一个记录
	（3）void endgrent(void);//关闭组文件
添加组ID：
	int getgroups(int size,gid_t list[]);//返回添加的组ID数，失败返回-1
		//将进程所属用户的各添加组ID填写到组grouplist中，最多为size个
	int setgroups(size_t size,const gid_t *list);//返回0，失败返回-1
		//一般由超级用户调用为进程设置添加组ID表，size为个数
	int initgroups(const char *username,gid_t basegid);//返回0，失败返回-1
		//超级用户调用读取整个组文件(方法见上)，然后调用setgroups函数
系统标识：
	int uname(struct utsname *buf);
	struct utsname {
        char sysname[];    /* Operating system name (e.g., "Linux") */
        char nodename[];   /* Name within "some implementation-definednetwork" */
        char release[];    /* Operating system release (e.g., "2.6.28") */
        char version[];    /* Operating system version */
        char machine[];    /* Hardware identifier */
        #ifdef _GNU_SOURCE
        char domainname[]; /* NIS or YP domain name */
        #endif
        };
当前时间和日期：
	time_t time(time_t *calptr);//返回时间值，失败返回-1
						内核
					  （time）
					time_t（日历时间）
	gmtime()	localtime()		mktime(反向) 	ctime()
		 struct tm(年月日时分秒结构体)				|
	strftime()					asctime()			|	
	格式化字符串					|_______________|
											字符串
struct tm {
               int tm_sec;         /* seconds */
               int tm_min;         /* minutes */
               int tm_hour;        /* hours */
               int tm_mday;        /* day of the month */
               int tm_mon;         /* month */
               int tm_year;        /* year */
               int tm_wday;        /* day of the week */
               int tm_yday;        /* day in the year */
               int tm_isdst;       /* daylight saving time */
           };
	struct tm *gmtime(const time_t *timeptr);
		//将日历时间变换成国际标准时间的年月日时分秒
	struct tm *localtime(const time_t *timeptr);
		//将日历时间变换为本地时间
	time_t mktime(struct time_t *timeptr);
		//将参数转换为time_t值
	char *asctime(const struct tm *timeptr);
		//返回null结尾的字符串
	char *ctime(const time_t *timeptr);
		//返回null结尾的字符串
	size_t strftime(char *buf,size_t maxsize,const char *format,const struct tm *timeptr);
---------------------UNIX进程的环境------------------------------------------------
进程终止	













